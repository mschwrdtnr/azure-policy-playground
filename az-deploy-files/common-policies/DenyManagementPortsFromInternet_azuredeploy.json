{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "managementGroupName": {
            "type": "String",
            "metadata": {
                "description": "Name of the management group where the policy set will be assigned"
            }
        },
        "policySetDefinitionName": {
            "defaultValue": "Deny-PublicPaaSEndpoints",
            "type": "String",
            "metadata": {
                "description": "Name of the policy set definition"
            }

    }
    },
    "resources": [
        {
            "type": "Microsoft.Authorization/policyDefinitions",
            "apiVersion": "2021-06-01",
            "name": "TEST",
	"properties": {
		"policyType": "Custom",
		"mode": "All",
		"displayName": "Management port access from the Internet should be blocked",
		"description": "This policy denies any network security rule that allows management port access from the Internet, by default blocking SSH/RDP ports.",
		"metadata": {
			"version": "2.1.1",
			"category": "Network",
			"source": "https://github.com/Azure/Enterprise-Scale/",
			"replacesPolicy": "Deny-RDP-From-Internet",
			"alzCloudEnvironments": [
				"AzureCloud",
				"AzureChinaCloud",
				"AzureUSGovernment"
			]
		},
		"parameters": {
			"effect": {
				"type": "String",
				"metadata": {
					"displayName": "Effect",
					"description": "Enable or disable the execution of the policy"
				},
				"allowedValues": [
					"Audit",
					"Deny",
					"Disabled"
				],
				"defaultValue": "Deny"
			},
			"ports": {
				"type": "Array",
				"metadata": {
					"displayName": "Ports",
					"description": "Ports to be blocked"
				},
				"defaultValue": [
					"22",
					"3389"
				]
			}
		},
		"policyRule": {
			"if": {
				"anyOf": [
					{
						"allOf": [
							{
								"field": "type",
								"equals": "Microsoft.Network/networkSecurityGroups/securityRules"
							},
							{
								"allOf": [
									{
										"field": "Microsoft.Network/networkSecurityGroups/securityRules/access",
										"equals": "Allow"
									},
									{
										"field": "Microsoft.Network/networkSecurityGroups/securityRules/direction",
										"equals": "Inbound"
									},
									{
										"anyOf": [
											{
												"field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange",
												"equals": "*"
											},
											{
												"field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange",
												"in": "[parameters('ports')]"
											},
											{
												"count": {
													"value": "[parameters('ports')]",
													"where": {
														"value": "[if(and(not(empty(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'))), contains(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'),'-')), and(lessOrEquals(int(first(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current())),greaterOrEquals(int(last(split(field('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRange'), '-'))),int(current()))), 'false')]",
														"equals": "true"
													}
												},
												"greater": 0
											},
											{
												"count": {
													"value": "[parameters('ports')]",
													"name": "ports",
													"where": {
														"count": {
															"field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
															"where": {
																"value": "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]",
																"equals": "true"
															}
														},
														"greater": 0
													}
												},
												"greater": 0
											},
											{
												"not": {
													"field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
													"notEquals": "*"
												}
											},
											{
												"not": {
													"field": "Microsoft.Network/networkSecurityGroups/securityRules/destinationPortRanges[*]",
													"notIn": "[parameters('ports')]"
												}
											}
										]
									},
									{
										"anyOf": [
											{
												"field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix",
												"equals": "*"
											},
											{
												"field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefix",
												"equals": "Internet"
											},
											{
												"not": {
													"field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]",
													"notEquals": "*"
												}
											},
											{
												"not": {
													"field": "Microsoft.Network/networkSecurityGroups/securityRules/sourceAddressPrefixes[*]",
													"notEquals": "Internet"
												}
											}
										]
									}
								]
							}
						]
					},
					{
						"allOf": [
							{
								"field": "type",
								"equals": "Microsoft.Network/networkSecurityGroups"
							},
							{
								"count": {
									"field": "Microsoft.Network/networkSecurityGroups/securityRules[*]",
									"where": {
										"allOf": [
											{
												"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].access",
												"equals": "Allow"
											},
											{
												"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].direction",
												"equals": "Inbound"
											},
											{
												"anyOf": [
													{
														"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange",
														"equals": "*"
													},
													{
														"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange",
														"in": "[parameters('ports')]"
													},
													{
														"count": {
															"value": "[parameters('ports')]",
															"name": "ports",
															"where": {
																"value": "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRange'), '-'))),int(current('ports')))), 'false')]",
																"equals": "true"
															}
														},
														"greater": 0
													},
													{
														"count": {
															"value": "[parameters('ports')]",
															"name": "ports",
															"where": {
																"count": {
																	"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]",
																	"where": {
																		"value": "[if(and(not(empty(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'))), contains(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'),'-')), and(lessOrEquals(int(first(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports'))),greaterOrEquals(int(last(split(current('Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]'), '-'))),int(current('ports')))) , 'false')]",
																		"equals": "true"
																	}
																},
																"greater": 0
															}
														},
														"greater": 0
													},
													{
														"not": {
															"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]",
															"notEquals": "*"
														}
													},
													{
														"not": {
															"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].destinationPortRanges[*]",
															"notIn": "[parameters('ports')]"
														}
													}
												]
											},
											{
												"anyOf": [
													{
														"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix",
														"equals": "*"
													},
													{
														"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefix",
														"equals": "Internet"
													},
													{
														"not": {
															"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]",
															"notEquals": "*"
														}
													},
													{
														"not": {
															"field": "Microsoft.Network/networkSecurityGroups/securityRules[*].sourceAddressPrefixes[*]",
															"notEquals": "Internet"
														}
													}
												]
											}
										]
									}
								},
								"greater": 0
							}
						]
					}
				]
			},
			"then": {
				"effect": "[parameters('effect')]"
			}
		}
	}
},
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "2021-06-01",
            "name": "[concat(parameters('policySetDefinitionName'))]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupName'), '/providers/Microsoft.Authorization/policySetDefinitions/', parameters('policySetDefinitionName'))]"
            ],
            "properties": {
                "displayName": "[parameters('policySetDisplayName')]",
                "policyDefinitionId": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupName'), '/providers/Microsoft.Authorization/policySetDefinitions/', parameters('policySetDefinitionName'))]",
                "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('managementGroupName'))]",
                "enforcementMode": "DoNotEnforce",
                "parameters": {
                    "CosmosPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').CosmosPublicIpDenyEffect]"
                    },
                    "KeyVaultPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').KeyVaultPublicIpDenyEffect]"
                    },
                    "SqlServerPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').SqlServerPublicIpDenyEffect]"
                    },
                    "StoragePublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').StoragePublicIpDenyEffect]"
                    },
                    "AKSPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').AKSPublicIpDenyEffect]"
                    },
                    "ACRPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').ACRPublicIpDenyEffect]"
                    },
                    "AFSPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').AFSPublicIpDenyEffect]"
                    },
                    "PostgreSQLFlexPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').PostgreSQLFlexPublicIpDenyEffect]"
                    },
                    "MySQLFlexPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').MySQLFlexPublicIpDenyEffect]"
                    },
                    "BatchPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').BatchPublicIpDenyEffect]"
                    },
                    "MariaDbPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').MariaDbPublicIpDenyEffect]"
                    },
                    "MlPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').MlPublicIpDenyEffect]"
                    },
                    "RedisCachePublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').RedisCachePublicIpDenyEffect]"
                    },
                    "BotServicePublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').BotServicePublicIpDenyEffect]"
                    },
                    "AutomationPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').AutomationPublicIpDenyEffect]"
                    },
                    "AppConfigPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').AppConfigPublicIpDenyEffect]"
                    },
                    "FunctionPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').FunctionPublicIpDenyEffect]"
                    },
                    "AsePublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').AsePublicIpDenyEffect]"
                    },
                    "AsPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').AsPublicIpDenyEffect]"
                    },
                    "ApiManPublicIpDenyEffect": {
                        "value": "[parameters('policyParameters').ApiManPublicIpDenyEffect]"
                    },
                    "ContainerAppsEnvironmentDenyEffect": {
                        "value": "[parameters('policyParameters').ContainerAppsEnvironmentDenyEffect]"
                    }
                }
            }
        }
    ]
}